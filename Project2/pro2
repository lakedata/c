2장. C++프로그래밍의 기본

using namespace std;
std::cout 

주석문과 main()함수
여러 줄 주석문 /**/
한줄 주석문 //
int main() {//main()의 리턴 타입 int (void는 표준 아님)	return 0; //개발자 편리를 위해 return문 생략가능
}

#include <iostream>
전처리기에게 내리는 지시

화면 출력
cout과 <<(시트연산자)
cout 객체
std::cout으로 사용

<<연산자 활용
문자열 및 기본 타입의 데이터 출력
bool, char, short, int, long, float, double 타입 값 출력
int n=3;
char c=“#”
std:cout << c << 5.5 << ‘-’ << n << “hello” << true;
std:cout << 변수 << 상수 << 문자 << 정수변수 << 문자열 << bool;
연산식뿐 아니라 함수 호출도 가능
std::cout << f(); //함수 f()리턴값을 출력한다.
다음 줄로 넘어가기
‘\n’
endl 조작자 사용
std::cout << “Hello” << ‘\n’
std:cout << “Hello” << std::endl;

namespace개념
이름 충돌 해결
개발자가 자신만의 이름 공간을 생성할 수 있도록 함


std::란?
이름 공간 중 하나
std이름 공간에 선언된 이름을 접근하기 위해 std::접두어 사용
std::cout, std:cin, std:endl

std:: 생략
using 지시어 사용
using std::cout;//cout에 대해서만 std::생략
using namespace std;//이름 공간에 선언된 모든 이름에 std::생략

cin과 >> 연산자를 이용한 키 입력
cin
키보드를 연결하는 c++ 입력 스트림 객체
>>연산자
스트림 추출 연산자

C-스트링으로 문자열 다루기
c언어에서 사용한 함수 사용 가능
strmp(), strlen(), strcpy()
<cstring>이나 <string.h> 헤더 파일 include
<cstring>헤더 파일을 사용하는 것이 바람직함: c++표준 방식

문자열 입력
char name[6]//5개의 문자를 저장할 수 있는 char 배열
char name[11]//한글은 5개 글자, 영문은 10개까지 저장

cin 문제점
공백X- 공백 문자는 구분자로 인식

cin.getline()을 이용한 문자열 입력
공백이 낀 문자열을 입력 받는 방법
cin.getline(문자열, 크기, 구분자)
cin.getline(char buf[], int size. char delimitChar)
buff에 최대 size-1의 문자 입력, 끝에 “\0” 붙임
delimitChar)를 만나면 입력 중단. 끝에 ‘\0’ 붙임

string 클래스
c++에서 강력 추천
문자열 크기 에 따른 제약 없음
string클래스가 스스로 문자열 크기에 맞게 내부 버퍼 조절
<string>헤더 파일 선언

getline(cin, str) 
=빈칸을 포함하는 문자열 입력가능
=getline()은 string타입의 문자열을 입력 받기 위해 제공되는 전역 함수
